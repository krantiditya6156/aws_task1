---
Parameters:
  SourceBucketName:
    Description: Enter source bucket name
    Type: String

  DestinationBucketName:
    Description: Enter destination bucket name
    Type: String

Resources:
  SourceBucket:
    Type: AWS::S3::Bucket 
    Properties:
      BucketName: !Ref SourceBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: "s3:ObjectCreated:*"
            Function: !GetAtt LambdaFunctionForS3event.Arn 

  S3InvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunctionForS3event
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${SourceBucketName}'

  DestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DestinationBucketName

    
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${SourceBucketName}/*
                  - !Sub arn:aws:s3:::${DestinationBucketName}/*
      
      Description: lambda execuation role policies

  LambdaFunctionForS3event:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Description: Lambda function that triggers on S3 object creation event in the
        source bucket and copies the object to the destination bucket.
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Environment: 
        Variables:
          "SourceBucketName": !Ref SourceBucketName
          "DestinationBucketName": !Ref DestinationBucketName
      Code:
        ZipFile: |
          import json
          import os
          import boto3


          def lambda_handler(event, context):
              print(event)

              source_bucket_name = os.environ["SourceBucketName"]
              destination_bucket_name = os.environ["DestinationBucketName"]

              bucket_name = event['Records'][0]['s3']['bucket']['name']
              print("bucket_name: ", event['Records'][0]['s3']['bucket']['name'])

              file_name = event['Records'][0]['s3']['object']['key']
              print("file_name: ", event['Records'][0]['s3']['object']['key'])

              s3 = boto3.client('s3')
              # and s3.Bucket(destination_bucket_name) in s3.buckets.all()
              try:  
                  if bucket_name == source_bucket_name:
                      print("Source bucket exists")
                      copy_source = {'Bucket': bucket_name, 'Key': file_name}
                      s3.copy_object(CopySource=copy_source, Bucket=destination_bucket_name, Key=file_name)
                      print("File copied successfully")
                  else:
                      print("Source bucket or Destination bucket does not exist")
              except Exception as e:
                  print("Error: ", e)
                  


              # TODO implement
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }